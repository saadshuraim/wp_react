make this project. Make sure no typescript is used. i need only react app


Project Brief: BookHaven Frontend Development
Project Name: BookHaven

Description:

You have been hired as a React developer to build the frontend of BookHaven, an online bookstore platform where users can browse books, view detailed information, submit reviews, add new books, and manage their favorite selections. The platform will also include user authentication features for personalized functionality. For this phase, we are focusing solely on the frontend using React with JavaScript (no TypeScript). The design should be modern, visually appealing, and interactive with animations and transitions, while ensuring the website is fully responsive across devices (mobile, tablet, and desktop).

Tech Stack:

React (JavaScript, no TypeScript)
React Router for navigation
React Hooks for state management
CSS (with a modern framework like Tailwind CSS or styled-components recommended) for styling
Optional: Libraries like Framer Motion or GSAP for animations/transitions
Key Requirements:

Build a fully functional React application with a component-based architecture.
Use React Hooks for state management (no Redux or Context API unless absolutely necessary).
Implement navigation with React Router, including nested routes.
Design a modern, responsive UI with smooth animations and transitions.
Simulate backend interactions with mock data (e.g., a JavaScript array of books and users).
Ensure best practices in event handling, form validation, and code organization.
Detailed Requirements
1. Homepage
Purpose: Display a list of available books and allow users to search for books.
Features:
A grid layout of book cards showing the book’s title, author, cover image, and a short description (truncate if too long).
A search bar at the top to filter books by title or author (case-insensitive search).
Each book card should be clickable, linking to the book’s detailed page.
Design:
Modern grid layout with hover effects (e.g., scale-up animation on cards).
Smooth fade-in animation when the page loads.
Responsive: 1 column on mobile, 2-3 columns on tablet, 4+ columns on desktop.
State Management:
Use useState to manage the search input and filtered book list.
2. Book Detail Page
Purpose: Provide detailed information about a selected book and allow users to read/add reviews.
Features:
Display book details: title, author, cover image, full description, and average rating (mocked for now).
A reviews section showing a list of user-submitted reviews (mock data with username, rating, and comment).
A form for logged-in users to submit a review (rating out of 5 and text comment).
A “Mark as Favorite” button (toggle functionality).
Design:
Clean, modern layout with a hero section for the book cover and details.
Reviews fade in as they load; form submission triggers a slide-in animation for the new review.
Responsive: Stack elements vertically on mobile, side-by-side on larger screens.
State Management:
Use useState for review form inputs and favorite status.
Simulate adding a review by updating local state (no backend).
3. Add New Book Form
Purpose: Allow users to add a new book to the platform.
Features:
Form fields: title (required), author (required), description (required), cover image URL (optional).
Validation: Ensure required fields are filled; display error messages below fields if invalid.
On submission, add the book to the local state (mock data) and redirect to the homepage.
Design:
Modern form with animated input focus effects (e.g., label floats up when typing).
Submit button with a loading spinner animation (mocked).
Responsive: Full-width fields on mobile, constrained width on desktop.
State Management:
Use useState for form inputs and validation errors.
4. Navigation with React Router
Purpose: Enable seamless navigation across the application.
Features:
A persistent navigation bar with links to:
Home ("/")
Add Book ("/add-book")
Favorites ("/favorites")
Login/Logout (toggle based on auth state)
Nested routes:
"/book/:id" for the book detail page.
Smooth page transitions (e.g., fade or slide) when switching routes.
Design:
Modern, sticky navbar with a hamburger menu on mobile (animated slide-out).
Active link highlighted with a subtle animation (e.g., underline or color change).
5. State Management with React Hooks
Purpose: Manage application state without external libraries.
Features:
Use useState for local component state (e.g., search, form inputs, reviews).
Use useEffect to simulate fetching mock data on page load (e.g., books list).
Persist favorites in localStorage using useEffect to sync state.
6. User Authentication System (Frontend-Only)
Purpose: Simulate user login/logout for personalized features.
Features:
A login page ("/login") with email and password fields (mock validation: email format, password > 6 chars).
On successful login, set an isAuthenticated flag in state and redirect to the homepage.
Logout button in the navbar clears the flag and redirects to the login page.
Restrict access to “Add Book” and “Favorites” pages for logged-in users only (redirect to login if not authenticated).
Design:
Minimalist login form with animated input transitions.
Success/error messages with fade-in animations.
State Management:
Use useState for auth state and form inputs.
7. Favorites Feature
Purpose: Allow users to mark books as favorites and view them on a dedicated page.
Features:
“Mark as Favorite” button on the book detail page toggles the favorite status.
A “Favorites” page ("/favorites") displays a grid of favorited books.
Persist favorites in localStorage to retain them across page refreshes.
Design:
Similar to the homepage grid with a heart icon animation when toggling favorite status.
Empty state message with a subtle fade-in if no favorites are added.
State Management:
Use useState for the favorites list, synced with localStorage via useEffect.
Mock Data
Since this is frontend-only, create a mock dataset in a separate data.js file. Example:

javascript

Collapse

Wrap

Copy
export const books = [
  {
    id: 1,
    title: "The Great Gatsby",
    author: "F. Scott Fitzgerald",
    description: "A story of the fabulously wealthy Jay Gatsby...",
    coverImage: "https://example.com/gatsby.jpg",
    reviews: [
      { username: "john_doe", rating: 4, comment: "Great read!" }
    ]
  },
  // Add more books...
];
Design Guidelines
Modern Aesthetic: Use a clean color palette (e.g., soft whites, muted pastels, bold accents), rounded corners, and subtle shadows.
Animations:
Fade-in for page loads and content updates.
Scale-up hover effects on book cards.
Slide-in transitions for reviews and form submissions.
Responsiveness:
Mobile: Stack content vertically, use touch-friendly buttons.
Tablet: Adjust grid layouts (2-3 columns).
Desktop: Full-width layouts with multi-column grids.
Typography: Use modern, readable fonts (e.g., Google Fonts like Roboto or Poppins).
Deliverables
A fully functional React application meeting all requirements.
Well-organized code with reusable components (e.g., BookCard, ReviewForm, Navbar).
A README.md file with instructions to run the project locally (npm install, npm start).
Mock data file (data.js) for books and reviews.
Notes for the Developer
Focus on modularity and reusability in the component structure.
Simulate backend delays (e.g., setTimeout) for realism where applicable.
Avoid TypeScript; stick to plain JavaScript.
Test responsiveness across common screen sizes (mobile: 375px, tablet: 768px, desktop: 1440px).
Use a CSS framework or custom CSS to achieve the modern design, but keep it lightweight.


Use React Js , with valid jsx and java script and VIte BUndeler 

STRICTLY NO tsx 